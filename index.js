/*
 Максимально приблизил к тому как это работает на МК с шаговым двигателем. Конечно там все проиходит в несколько раз больше. Таймер работает с частатой 1 микросекунда. ПИД регулятор можно выпилить и заменить на что-то другое.
 Функции position и setInterval Желательно не изменять (за исключением выпиливания ПИД регулятора из интервала).
 Управлять движением стрелки можно только величеной переменной delay и направлением движения direction (которое и передаем в функцию position).
 Изменять можно все коэффициенты на любые значения. Интегральный коэффициент ничего не дает. Он нужен только в тех случаяз, если на пример стрелка хочет сдвинуться но ей что-то мешает. В этом случае интегральная часть будет увеличивать воздействие.
*/

var car = document.querySelector('.car');
var taho = document.querySelector('.taho');
var newPos; // Куда нужно стремиться
var delay = 300; // Стартовая задержка
var stepsPID = 0, // Счетчик для подсчета ПИД регулятора
    stepsDelay = 0; // Счетчик для активации функции сдвига на шаг
var pos = parseInt(taho.value);
var direction = 1; // Направление движения. Может быть 1 или -1
var oldPosition;
var iSum = 0, // Переменная для накопления интегральной составляющей
    iMin = -10,
    iMax = 10;

function position (dir) // Сдвиг на один шаг.
{
  pos = parseInt(taho.value); // Нынешняя позиция

  if (dir > 0) {
    pos++;
  }
  if (dir < 0) {
    pos--;
  }
  taho.value = pos; // Новая позиция
}

// Имитация постоянного движения.
setInterval( () => {

  newPos = parseInt(car.value); // Здесь храним положение к которому нужно стремиться

  stepsPID++; // Счетчик задержки пересчета скорости движения

  stepsDelay++; // Счетчик подсчета прошедшего времени

  if (stepsDelay >= delay) { // Если время пришло, то двигаем "стрелкой" на один шаг
    stepsDelay = 0;
    position(direction); // Функция сдвига на один шаг. Аргумент - направление движения.
  }

  if (stepsPID >= 10) { // Если пришло время для нового расчета скорости движения
    stepsPID = 0;
    PID ( parseInt(taho.value), newPos ); // Расчет скорости движения
  }
}, 1);

// Функция ПИД регулятора.
function PID (nowPosition, needPosition) {
  // Коэффициенты PID регулятора.
  var Kp = 4.2, // Пропорциональный - на сколько ошибка на столько и воздействует.
      Ki = 0.0, // Интегральный - если по какой-то причине не можем дойти до 0 то этот коэффициент по немногу увеличивает силу воздействия.
      Kd = 5.5; // Дифференциальный - придает ускорение, если пропорциональный сильно снизил скорость.

  // пределы скоростей.
  var MaxSpeed = 1,
      MinSpeed = 100;


  // Задаем направление движения
  if (nowPosition - needPosition < 0) {
    direction = 1;
  } else {
    direction = -1;
  }


  // ========== Вычисление пропорциональной составляющей ==================
  var error = Math.abs(nowPosition - needPosition); // вычисляем ошибку положения
  var Up = Kp * error;
  // ========== Вычисление пропорциональной составляющей ==================


  // ========== Вычисление интегральной составляющей ======================
  iSum += ( nowPosition - needPosition );  //
	if ( iSum < iMin ) iSum = iMin;  //
	if ( iSum > iMax ) iSum = iMax;  //

  var Ui = Ki * iSum;
  // ========== Вычисление интегральной составляющей ======================


  // ========== Вычисление дифференциальной составляющей ==================
  var Ud = Kd * ( Math.abs(nowPosition - oldPosition) );
    oldPosition = nowPosition
  // ========== Вычисление дифференциальной составляющей ==================


  // Сбор всех составляющих в одну "силу" воздействия.
  var U = Up + Ui + Ud;

  if ( U < MaxSpeed ) U = MaxSpeed;
  if ( U > MinSpeed ) U = MinSpeed;

  // Так как скорость движения обратна силе воздействия - "переворачиваем" силу воздействия
  U = ( MinSpeed + MaxSpeed ) - U;

  delay = U;
}
